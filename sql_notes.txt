<SQL Notes>(specifically for sqlite3)
SQL aka structured query language is a language for managing data in databases. It's only used for one thing which is talking to databases.

.schema in sqlite3 for details on your table

<creating tables>

CREATE TABLE cats( id INTEGER PRIMARY KEY, name TEXT, age, INTEGER);

so the non "cat naming stuff" is in upper case so we don't lose track of things and get things mixed up. 

<altering tables>

ALTER TABLE cats ADD COLUMN breed TEXT


<data types>
TEXT: Your alphanumerical characters you want to represent as plain text
INTEGER: Whole numbers with no letter or special characters or decimal points.
REAL: Good ol decimals. sqlite will store decimals up to 15 characters long. 
BLOB: Generally used for holding binary data. 

<Inserting>

If the ID column is a Primary Key then you don't need to worry about setting anything as the ID when you're inserting data because Primary Key columns are auto-incrementing. 
An example of an insertion is INSERT INTO cats(name,age,breed) VALUES ('Maru',3,'Scottish Fold');


<Select> 
SELECT [name of columns we are going to select] FROM [Table name]
e.g 
SELECT id, name,age,breed FROM cats;

SELECT * FROM cats; (Show all in the database)

You can also SELECT cats.name FROM cats instead of SELECT name FROM cats
This is useful when you have a bunch of tables in one .db file

<Where>

Kind of like an if statement so if you want to see the data of a specific cat you can say SELECT * FROM cats WHERE name = "Maru"; or something like 
SELECT * FROM cats WHERE age = "1"; or 
SELECT * FROM cats WHERE age < 4;



<Update> 
So you can update a row in the database. Say if you want to change the name you can do this
UPDATE cats SET name = "Hana" WHERE name = "Hannah";

So the format is 
UPDATE [table name] SET [column name] = "new value" WHERE [column name] = "old value you want to replace"



<Delete> 

DELETE FROM [table name] WHERE [column name] = [value] 

example

DELETE FROM cats WHERE id = 2;  or 
DELETE FROM cats where name = "Maru";



<Querying>
Query refers to any SQL statement that retrieves data from your databases. For example 
SELECT * FROM cats; is a query as it selects all of the rows from a table called cats. 

or SELECT * FROM cats WHERE name = "Maru"; 


<Helpful stuff>
.headers on  # will output the name of each column e.g breed, age,id at the top
.mode column #makes things look a lot cleaner. Use together with headers on

<Order by>

So one way we can sort our list of cats is by age.
To do that we write : SELECT * FROM cats ORDER BY age; 
The template is SELECT [column name] FROM [table name] ORDER BY [column name] ASC|DESC;


<Limit> 

So say our database has 10,000 entries and I only want the oldest cat. I can do the my sort age in descending order and add LIMIT 1 so I'll only get one result back which is the oldest. 

E.g SELECT * FROM cats ORDER BY age DESC LIMIT 1;


<Between>

SELECT * FROM cats WHERE age BETWEEN 1 AND 3

Basically a normal SELECT query but with the BETWEEN tag you can find cats between certain age or between certain ID.

<Null> 

So lets say you have a cat and it has a name but you can't identify the age or the breed, you can add it into the database still despite missing data. 

INSERT INTO cats (name,age,breed) VALUES ("Bob", NULL, NULL);

You can even search for cats with a null age or null breed with 

SELECT * FROM cats WHERE age IS NULL;


<Count> 
This will give you the number of matches with your query. e.g 
SELECT COUNT(name) FROM cats WHERE age BETWEEN 1 AND 3; or 
SELECT COUNT(*) FROM cats WHERE age = 3; which will find out how many cats have the age of 3.

<Group by> 
SELECT breed, count(*) FROM cats GROUP BY breed;
So this like will group by breed and will tell you the count of each breed. 


<Multiple Tables>

So say I've got multiple tables in a .db file. E.g I have cats and dogs table. 

I can display names of all the cats and the dogs with this line
SELECT cats.name, dogs.name FROM cats,dogs;

Format is SELECT [table1.column,table2.column] FROM [table1,table2];
