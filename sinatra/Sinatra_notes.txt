<bundle install>
By using this line of code, bundle install will lock in current
version of the gems used for the app. So if any updates happen, the App
won't break. It keeps the versions locked in a file called Gemfile.lock

<Shotgun>
Instead of using rackup, you can use shotgun which will reload code when
you save it. Saves you time from restarting server everytime you change
something

<Modular Sinatra Applications>
Web apps, even simple Sinatra ones tend to require a certain degree of
complexity. E.g multiple routes, route handlers, and configuration.
To handle this, Sinatra is more commonly used through the
Modular Sinatra Pattern (over the classical single file app.rb pattern)

So the first new convention this pattern introduces is the config.ru
The purpose of config.ru is have the environments requirements of the
application and start the application.

A common config.ru would look like
#
require 'sinatra'
require_relative './app.rb'
run Application
#
So config.ru requires a valid Sinatra Controller to run. A Sinatra Controller
is simply a Ruby class that inherits from Sinatra::Base. This inheritance
transforms a normal ruby class into a web app by giving it a rack-compatible
interface through inheriting from the "base" of the Sinatra framework.

 So say in our app.rb we have this line
 #
 class Application < Sinatra::Base
 #
 The class Application inherits from Sinatra::Base which defines the HTTP
 interface and are called Controllers

 In a single controller application, a single file defining the controller
 like app.rb will be enough as that controller will define every single
 url and response of the application.

 Controllers define an HTTP method using the Sinatra routing DSL provided
 by methods like get and post.

 The final step in creating a controller is mounting it in config.ru. Mounting
 a controller means telling Rack that part of your webapp is defined within
 the following class. We do this in config.ru by using "run Application"
 where "run" is the mounting method and "Application" is the Controller class
 that inherits from Sinatra::Base

 tldr
 #
 define and create sinatra controller in a separate ruby file.
 Do this by creating a class which inherits from Sinatra::Base
 then mount the controller in config.ru by simply
 run NameofClass
